package ija.ui;

import ija.board.MazeBoard;
import ija.controller.GameIO;
import static ija.Labyrinth.LOG;
import javax.swing.JComboBox;

/**
 * Graficke rozhranie hry - generovane pomocou NETBEANS, doplnene o vlastne
 * metody
 *
 * @author xjezov01
 * @author xmarus05
 */
public class Gui extends javax.swing.JFrame {

    MazeBoard hraciaPlocha;

    public String gameTXT[] = new String[100];
    private String GameName;

    public static final String[] origLANG = {
        "<font size=\"5\" color=\"green\">WIN WIN WIN</font><br>",
        "GET CARD !<br>",
        "TURN ROCK AND INSERT ! OR YOU CAN ACCEPT!<br>",
        "ACCEPT INSERT OR YOU CAN USE UNDO !<br>",
        "WALK ! THAN ACCEPT !<br>",
        "<font color=\"green\">GRATULATION ! YOU FOUND YOUR CARD!</font><br>", //5
        "",
        "",
        "",
        "",//9
        "<html>ARE YOU SURE???<br><br><br><br></html>", //10
        "<html>Labyrinth Game v1.0 2015<br><br>Authors:<br>Filip Ježovica  : xjezov01@stud.fit.vutbr.cz<br>"
        + "Marek Marušic : xmarus05@stud.fit.vutbr.cz<br>"
        + "<br>This game was a school project in JAVA</html>",//11

        "<html>1. Take a card<br/>2. You can turn free rock and insert it to board. "
        + "Then clik accept.<br/>3. Move your player to gettreasure from your card. Then click accept.<br/>"
        + "4. When you are on rock with your treasure click to get it, then you have to take new treasure card "
        + "and continue in your turn.<br/> 5. After you are done click accept and next player will be on turn.</html>",//12
        "",
        "",
        "ON TURN IS PLAYER:",//15
        "Name:",
        "... found items:",
        "",
        "",//19
        // BUTTONS + TEXTS IN GUI
        "NEW GAME", "OPEN GAME", "SAVE GAME", "RESUME GAME",//MAIN MENU 23
        "PLAYERS", "BACK !", "NEXT !", "2 PLAYERS", "3 PLAYERS", "4 PLAYERS",//NEW1 29
        "GAME TABLE", "BACK", "NEXT", "MAGIC CARDS",//NEW2 33
        "SET PLAYERS NAMES", "SET NAME!",//INSERT 35
        "BACK", "Resume selected game", "OPENING FAILED", "BACK TO MENU !",//OPEN 39
        "GAME STATS", "FREE ROCK", "MY CARD", "UNDO !", "ACCEPT !", "MENU !",//GAME 45
        "HELP", "How to play", "About", "Exit", "Set Language",//MENUBAR 50
        "ABOUT", "EXIT !", "MAIN MENU !",// ABOUTDIALOG 53
        "Choose language", "OK !",//LANGDIALOG 55
        "WIN WIN WIN", "Winner is", "MAIN MENU !",//WINDIALOG 58
        "Save done!", "OK !", "Set savegame name", "OK !", "Save FAILED !", "BACK !", "Save exists! OVERWRITE?", "BACK !", "OVERWRITE !",// SAVEDIALOG 68
        "PLAYER", "PLAY",//70
        "PRESS PLAY !", "", "", "", "", "", "", "", "", "",//80
        "", "", "", "", "", "", "", "", "", "",//90
        "", "", "", "", "", "", "", "", "",
        "EN-ORIGINAL",//99
    };

    /**
     * Konstruktor GUI, vytvori form, inicializuje komponenty a nastavi original
     * jazyk
     */
    public Gui() {
        this.GameName = null;
        initComponents();
        gameTXT = origLANG;
        setLangGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        PLGRP = new javax.swing.ButtonGroup();
        CARDGRP = new javax.swing.ButtonGroup();
        SAVEDIALOG = new javax.swing.JDialog();
        SAVEDONE = new javax.swing.JPanel();
        SAVEDONEINFO = new javax.swing.JLabel();
        SAVEDONEOK = new javax.swing.JButton();
        SAVE1 = new javax.swing.JPanel();
        SAVE1_OK = new javax.swing.JButton();
        SAVE1_INFO = new javax.swing.JLabel();
        nameOfGame = new javax.swing.JTextArea();
        SAVEFAIL = new javax.swing.JPanel();
        SAVEFAILINFO = new javax.swing.JLabel();
        SAVEFAILOK = new javax.swing.JButton();
        SAVEEXIST = new javax.swing.JPanel();
        SAVEEXISTINFO = new javax.swing.JLabel();
        SAVEOVERWRITE = new javax.swing.JButton();
        SAVEEXISTBACK = new javax.swing.JButton();
        WINDIALOG = new javax.swing.JDialog();
        WININFO = new javax.swing.JLabel();
        WINTOMEMU = new javax.swing.JButton();
        WINIS = new javax.swing.JLabel();
        WINNAME = new javax.swing.JLabel();
        ABOUT = new javax.swing.JDialog();
        ABOUTINFO = new javax.swing.JLabel();
        ABOUTTEXT = new javax.swing.JLabel();
        EXIT = new javax.swing.JButton();
        NOTEXIT = new javax.swing.JButton();
        LANGDIALOG = new javax.swing.JDialog();
        LANGDIALINFO = new javax.swing.JLabel();
        LANGCHOOSE = new javax.swing.JComboBox<String>();
        LANGSET = new javax.swing.JButton();
        MENU = new javax.swing.JPanel();
        NEWGAME = new javax.swing.JButton();
        OPENGAME = new javax.swing.JButton();
        SAVEGAME = new javax.swing.JButton();
        RESUMEGAME = new javax.swing.JButton();
        NEW1 = new javax.swing.JPanel();
        PL2 = new javax.swing.JRadioButton();
        PL3 = new javax.swing.JRadioButton();
        PL4 = new javax.swing.JRadioButton();
        NEW1_NEXT = new javax.swing.JButton();
        NEW1_BACK = new javax.swing.JButton();
        NEW1_INFO = new javax.swing.JLabel();
        NEW2 = new javax.swing.JPanel();
        SIZE = new javax.swing.JSlider();
        CARD12 = new javax.swing.JRadioButton();
        CARD24 = new javax.swing.JRadioButton();
        NEW2_BACK = new javax.swing.JButton();
        NEW2_NEXT = new javax.swing.JButton();
        NEW2_INFO = new javax.swing.JLabel();
        NEW2_CARDS = new javax.swing.JLabel();
        SIZEVAL = new javax.swing.JLabel();
        INSERTPLAYER = new javax.swing.JPanel();
        INSERTPLAYERINFO = new javax.swing.JLabel();
        PLAYERNR = new javax.swing.JLabel();
        OKINSERT = new javax.swing.JButton();
        PLAYERNAMESCR = new javax.swing.JScrollPane();
        PLAYERNAME = new javax.swing.JTextArea();
        OPEN = new javax.swing.JPanel();
        OPENSTART = new javax.swing.JButton();
        OPENBACK = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<String>();
        OPENFAILED = new javax.swing.JPanel();
        OPENFAILEDINFO = new javax.swing.JLabel();
        OPENFAILDEBACK = new javax.swing.JButton();
        GAME = new javax.swing.JPanel();
        statsPanel1 = new ija.Panels.StatsPanel();
        boardPanel1 = new ija.Panels.BoardPanel();
        myCardPanel1 = new ija.Panels.MyCardPanel();
        freePanel1 = new ija.Panels.FreePanel();
        MAINMENU = new javax.swing.JButton();
        ACCEPT = new javax.swing.JButton();
        UNDOBUTTON = new javax.swing.JButton();
        GAMECARD = new javax.swing.JLabel();
        GAMEFREE = new javax.swing.JLabel();
        GAMESTATS = new javax.swing.JLabel();
        GODMODE = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        HELP = new javax.swing.JMenu();
        MENUHTP = new javax.swing.JMenuItem();
        MENUABOUT = new javax.swing.JMenuItem();
        MENUEXIT = new javax.swing.JMenuItem();
        LANGINFO = new javax.swing.JMenu();
        OPENLANG = new javax.swing.JMenuItem();

        SAVEDIALOG.setTitle("Save window");
        SAVEDIALOG.setLocation(new java.awt.Point(200, 100));
        SAVEDIALOG.setMinimumSize(new java.awt.Dimension(800, 500));
        SAVEDIALOG.getContentPane().setLayout(null);

        SAVEDONE.setMinimumSize(new java.awt.Dimension(800, 500));
        SAVEDONE.setPreferredSize(new java.awt.Dimension(800, 500));
        SAVEDONE.setLayout(null);

        SAVEDONEINFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEDONEINFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SAVEDONEINFO.setText("SAVE DONE !");
        SAVEDONE.add(SAVEDONEINFO);
        SAVEDONEINFO.setBounds(70, 40, 680, 160);

        SAVEDONEOK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEDONEOK.setText("BACK TO MENU !");
        SAVEDONEOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEDONEOKActionPerformed(evt);
            }
        });
        SAVEDONE.add(SAVEDONEOK);
        SAVEDONEOK.setBounds(200, 250, 450, 140);

        SAVEDIALOG.getContentPane().add(SAVEDONE);
        SAVEDONE.setBounds(0, 0, 800, 500);

        SAVE1.setMinimumSize(new java.awt.Dimension(800, 500));
        SAVE1.setPreferredSize(new java.awt.Dimension(800, 500));
        SAVE1.setLayout(null);

        SAVE1_OK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVE1_OK.setText("SAVE !");
        SAVE1_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVE1_OKActionPerformed(evt);
            }
        });
        SAVE1.add(SAVE1_OK);
        SAVE1_OK.setBounds(220, 290, 360, 130);

        SAVE1_INFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVE1_INFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SAVE1_INFO.setText("SET NAME OF SAVE");
        SAVE1.add(SAVE1_INFO);
        SAVE1_INFO.setBounds(40, 10, 690, 100);

        nameOfGame.setColumns(20);
        nameOfGame.setFont(new java.awt.Font("Monospaced", 0, 50)); // NOI18N
        nameOfGame.setRows(5);
        SAVE1.add(nameOfGame);
        nameOfGame.setBounds(100, 150, 600, 90);

        SAVEDIALOG.getContentPane().add(SAVE1);
        SAVE1.setBounds(0, 0, 800, 500);

        SAVEFAIL.setMinimumSize(new java.awt.Dimension(800, 500));
        SAVEFAIL.setPreferredSize(new java.awt.Dimension(800, 500));
        SAVEFAIL.setLayout(null);

        SAVEFAILINFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEFAILINFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SAVEFAILINFO.setText("SAVE GAME FAILED !");
        SAVEFAIL.add(SAVEFAILINFO);
        SAVEFAILINFO.setBounds(70, 70, 590, 150);

        SAVEFAILOK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEFAILOK.setText("BACK TO MENU !");
        SAVEFAILOK.setToolTipText("");
        SAVEFAILOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEFAILOKActionPerformed(evt);
            }
        });
        SAVEFAIL.add(SAVEFAILOK);
        SAVEFAILOK.setBounds(210, 280, 420, 110);

        SAVEDIALOG.getContentPane().add(SAVEFAIL);
        SAVEFAIL.setBounds(0, 0, 800, 500);

        SAVEEXIST.setMinimumSize(new java.awt.Dimension(800, 500));
        SAVEEXIST.setPreferredSize(new java.awt.Dimension(800, 500));
        SAVEEXIST.setLayout(null);

        SAVEEXISTINFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEEXISTINFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SAVEEXISTINFO.setText("SAVE EXIST ! OVERWRITE?");
        SAVEEXIST.add(SAVEEXISTINFO);
        SAVEEXISTINFO.setBounds(60, 50, 680, 140);

        SAVEOVERWRITE.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEOVERWRITE.setText("OVERWRITE !");
        SAVEOVERWRITE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEOVERWRITEActionPerformed(evt);
            }
        });
        SAVEEXIST.add(SAVEOVERWRITE);
        SAVEOVERWRITE.setBounds(450, 270, 310, 120);

        SAVEEXISTBACK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEEXISTBACK.setText("BACK !");
        SAVEEXISTBACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEEXISTBACKActionPerformed(evt);
            }
        });
        SAVEEXIST.add(SAVEEXISTBACK);
        SAVEEXISTBACK.setBounds(50, 270, 310, 120);

        SAVEDIALOG.getContentPane().add(SAVEEXIST);
        SAVEEXIST.setBounds(0, 0, 800, 500);

        WINDIALOG.setTitle("Win window");
        WINDIALOG.setLocation(new java.awt.Point(200, 100));
        WINDIALOG.setMinimumSize(new java.awt.Dimension(800, 500));
        java.awt.GridBagLayout WINDIALOGLayout = new java.awt.GridBagLayout();
        WINDIALOGLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        WINDIALOGLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        WINDIALOGLayout.columnWeights = new double[] {200.0};
        WINDIALOGLayout.rowWeights = new double[] {20.0};
        WINDIALOG.getContentPane().setLayout(WINDIALOGLayout);

        WININFO.setFont(new java.awt.Font("Tahoma", 0, 50)); // NOI18N
        WININFO.setText("END GAME !");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        WINDIALOG.getContentPane().add(WININFO, gridBagConstraints);

        WINTOMEMU.setFont(new java.awt.Font("Tahoma", 0, 40)); // NOI18N
        WINTOMEMU.setText("MAIN MENU !");
        WINTOMEMU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WINTOMEMUActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        WINDIALOG.getContentPane().add(WINTOMEMU, gridBagConstraints);

        WINIS.setFont(new java.awt.Font("Tahoma", 0, 50)); // NOI18N
        WINIS.setForeground(new java.awt.Color(0, 204, 0));
        WINIS.setText("WINNER IS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        WINDIALOG.getContentPane().add(WINIS, gridBagConstraints);

        WINNAME.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        WINNAME.setForeground(new java.awt.Color(0, 0, 204));
        WINNAME.setText("PLAYER");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        WINDIALOG.getContentPane().add(WINNAME, gridBagConstraints);

        ABOUT.setTitle("HELP");
        ABOUT.setLocation(new java.awt.Point(200, 100));
        ABOUT.setMinimumSize(new java.awt.Dimension(800, 500));
        ABOUT.getContentPane().setLayout(null);

        ABOUTINFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        ABOUTINFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ABOUTINFO.setText("ABOUT/HOW TO PLAY");
        ABOUT.getContentPane().add(ABOUTINFO);
        ABOUTINFO.setBounds(70, 30, 660, 90);

        ABOUTTEXT.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        ABOUTTEXT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ABOUTTEXT.setText("ABOUT TEXT");
        ABOUT.getContentPane().add(ABOUTTEXT);
        ABOUTTEXT.setBounds(70, 140, 660, 300);

        EXIT.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        EXIT.setText("EXIT !");
        EXIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXITActionPerformed(evt);
            }
        });
        ABOUT.getContentPane().add(EXIT);
        EXIT.setBounds(410, 340, 320, 110);

        NOTEXIT.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        NOTEXIT.setText("NO !");
        NOTEXIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NOTEXITActionPerformed(evt);
            }
        });
        ABOUT.getContentPane().add(NOTEXIT);
        NOTEXIT.setBounds(60, 340, 320, 110);

        LANGDIALOG.setLocation(new java.awt.Point(400, 200));
        LANGDIALOG.setMinimumSize(new java.awt.Dimension(500, 300));
        LANGDIALOG.getContentPane().setLayout(null);

        LANGDIALINFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        LANGDIALINFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LANGDIALINFO.setText("SET LANGUAGE");
        LANGDIALOG.getContentPane().add(LANGDIALINFO);
        LANGDIALINFO.setBounds(30, 20, 440, 40);

        LANGCHOOSE.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        LANGCHOOSE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EN-ORIGINAL" }));
        LANGCHOOSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LANGCHOOSEActionPerformed(evt);
            }
        });
        LANGDIALOG.getContentPane().add(LANGCHOOSE);
        LANGCHOOSE.setBounds(90, 80, 330, 80);

        LANGSET.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        LANGSET.setText("OK !");
        LANGSET.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LANGSETActionPerformed(evt);
            }
        });
        LANGDIALOG.getContentPane().add(LANGSET);
        LANGSET.setBounds(140, 170, 240, 80);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Labyrinth Game v1.0 2015");
        setMinimumSize(new java.awt.Dimension(1200, 699));
        getContentPane().setLayout(new java.awt.CardLayout());

        MENU.setMinimumSize(new java.awt.Dimension(1200, 699));
        MENU.setPreferredSize(new java.awt.Dimension(1200, 699));
        MENU.setLayout(null);

        NEWGAME.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        NEWGAME.setText("NEW GAME !");
        NEWGAME.setMaximumSize(new java.awt.Dimension(97, 23));
        NEWGAME.setMinimumSize(new java.awt.Dimension(97, 23));
        NEWGAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEWGAMEActionPerformed(evt);
            }
        });
        MENU.add(NEWGAME);
        NEWGAME.setBounds(240, 350, 330, 130);

        OPENGAME.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        OPENGAME.setText("OPEN GAME !");
        OPENGAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENGAMEActionPerformed(evt);
            }
        });
        MENU.add(OPENGAME);
        OPENGAME.setBounds(610, 350, 330, 130);

        SAVEGAME.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        SAVEGAME.setText("SAVE GAME !");
        SAVEGAME.setEnabled(false);
        SAVEGAME.setMaximumSize(new java.awt.Dimension(97, 23));
        SAVEGAME.setMinimumSize(new java.awt.Dimension(97, 23));
        SAVEGAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEGAMEActionPerformed(evt);
            }
        });
        MENU.add(SAVEGAME);
        SAVEGAME.setBounds(610, 500, 330, 130);

        RESUMEGAME.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        RESUMEGAME.setText("RESUME !");
        RESUMEGAME.setEnabled(false);
        RESUMEGAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RESUMEGAMEActionPerformed(evt);
            }
        });
        MENU.add(RESUMEGAME);
        RESUMEGAME.setBounds(240, 500, 330, 130);

        getContentPane().add(MENU, "card2");

        NEW1.setMinimumSize(new java.awt.Dimension(1200, 699));
        NEW1.setLayout(null);

        PLGRP.add(PL2);
        PL2.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        PL2.setMnemonic('2');
        PL2.setSelected(true);
        PL2.setText("2 PLAYERS");
        NEW1.add(PL2);
        PL2.setBounds(480, 260, 470, 67);

        PLGRP.add(PL3);
        PL3.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        PL3.setMnemonic('3');
        PL3.setText("3 PLAYERS");
        NEW1.add(PL3);
        PL3.setBounds(480, 330, 460, 67);

        PLGRP.add(PL4);
        PL4.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        PL4.setMnemonic('4');
        PL4.setText("4 PLAYERS");
        NEW1.add(PL4);
        PL4.setBounds(480, 390, 450, 67);

        NEW1_NEXT.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        NEW1_NEXT.setText("NEXT !");
        NEW1_NEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEW1_NEXTActionPerformed(evt);
            }
        });
        NEW1.add(NEW1_NEXT);
        NEW1_NEXT.setBounds(910, 550, 210, 60);

        NEW1_BACK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        NEW1_BACK.setText("BACK !");
        NEW1_BACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEW1_BACKActionPerformed(evt);
            }
        });
        NEW1.add(NEW1_BACK);
        NEW1_BACK.setBounds(70, 550, 210, 60);

        NEW1_INFO.setFont(new java.awt.Font("Tahoma", 0, 70)); // NOI18N
        NEW1_INFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NEW1_INFO.setText("PLAYERS");
        NEW1.add(NEW1_INFO);
        NEW1_INFO.setBounds(90, 120, 1040, 110);

        getContentPane().add(NEW1, "card3");

        NEW2.setMinimumSize(new java.awt.Dimension(1200, 699));
        NEW2.setLayout(null);

        SIZE.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        SIZE.setMaximum(11);
        SIZE.setMinimum(5);
        SIZE.setToolTipText("");
        SIZE.setValue(7);
        SIZE.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SIZEStateChanged(evt);
            }
        });
        NEW2.add(SIZE);
        SIZE.setBounds(360, 170, 332, 97);

        CARDGRP.add(CARD12);
        CARD12.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        CARD12.setMnemonic('A');
        CARD12.setSelected(true);
        CARD12.setText("12");
        NEW2.add(CARD12);
        CARD12.setBounds(430, 410, 190, 81);

        CARDGRP.add(CARD24);
        CARD24.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        CARD24.setMnemonic('M');
        CARD24.setText("24");
        NEW2.add(CARD24);
        CARD24.setBounds(670, 410, 250, 81);

        NEW2_BACK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        NEW2_BACK.setText("BACK !");
        NEW2_BACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEW2_BACKActionPerformed(evt);
            }
        });
        NEW2.add(NEW2_BACK);
        NEW2_BACK.setBounds(70, 550, 210, 60);

        NEW2_NEXT.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        NEW2_NEXT.setText("NEXT !");
        NEW2_NEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEW2_NEXTActionPerformed(evt);
            }
        });
        NEW2.add(NEW2_NEXT);
        NEW2_NEXT.setBounds(910, 550, 210, 60);

        NEW2_INFO.setFont(new java.awt.Font("Tahoma", 0, 70)); // NOI18N
        NEW2_INFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NEW2_INFO.setText("GAME TABLE");
        NEW2.add(NEW2_INFO);
        NEW2_INFO.setBounds(50, 20, 1080, 120);

        NEW2_CARDS.setFont(new java.awt.Font("Tahoma", 0, 70)); // NOI18N
        NEW2_CARDS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NEW2_CARDS.setText("MAGIC CARDS");
        NEW2.add(NEW2_CARDS);
        NEW2_CARDS.setBounds(60, 290, 1080, 90);

        SIZEVAL.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        SIZEVAL.setText("7");
        NEW2.add(SIZEVAL);
        SIZEVAL.setBounds(700, 170, 170, 90);

        getContentPane().add(NEW2, "card4");

        INSERTPLAYER.setMinimumSize(new java.awt.Dimension(1200, 699));
        INSERTPLAYER.setPreferredSize(new java.awt.Dimension(1200, 699));
        INSERTPLAYER.setLayout(null);

        INSERTPLAYERINFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        INSERTPLAYERINFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        INSERTPLAYERINFO.setText("SET PLAYER NAMES");
        INSERTPLAYER.add(INSERTPLAYERINFO);
        INSERTPLAYERINFO.setBounds(70, 60, 1050, 80);

        PLAYERNR.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        PLAYERNR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PLAYERNR.setText("PLAYER 1");
        INSERTPLAYER.add(PLAYERNR);
        PLAYERNR.setBounds(140, 180, 930, 50);

        OKINSERT.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        OKINSERT.setText("SET NAME !");
        OKINSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKINSERTActionPerformed(evt);
            }
        });
        INSERTPLAYER.add(OKINSERT);
        OKINSERT.setBounds(470, 490, 300, 80);

        PLAYERNAMESCR.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        PLAYERNAMESCR.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        PLAYERNAMESCR.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        PLAYERNAME.setColumns(20);
        PLAYERNAME.setFont(new java.awt.Font("Monospaced", 0, 80)); // NOI18N
        PLAYERNAME.setRows(5);
        PLAYERNAMESCR.setViewportView(PLAYERNAME);

        INSERTPLAYER.add(PLAYERNAMESCR);
        PLAYERNAMESCR.setBounds(360, 320, 510, 110);

        getContentPane().add(INSERTPLAYER, "card8");

        OPEN.setMinimumSize(new java.awt.Dimension(1200, 699));
        OPEN.setLayout(null);

        OPENSTART.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        OPENSTART.setText("RESUME SELECTED GAME !");
        OPENSTART.setEnabled(false);
        OPENSTART.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENSTARTActionPerformed(evt);
            }
        });
        OPEN.add(OPENSTART);
        OPENSTART.setBounds(340, 320, 520, 190);

        OPENBACK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        OPENBACK.setText("BACK !");
        OPENBACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENBACKActionPerformed(evt);
            }
        });
        OPEN.add(OPENBACK);
        OPENBACK.setBounds(70, 550, 210, 60);

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "aaaa" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        OPEN.add(jComboBox1);
        jComboBox1.setBounds(400, 130, 410, 100);

        getContentPane().add(OPEN, "card6");

        OPENFAILED.setMinimumSize(new java.awt.Dimension(1200, 700));
        OPENFAILED.setPreferredSize(new java.awt.Dimension(1200, 700));
        OPENFAILED.setLayout(null);

        OPENFAILEDINFO.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        OPENFAILEDINFO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OPENFAILEDINFO.setText("GAME OPENING FAILED !");
        OPENFAILED.add(OPENFAILEDINFO);
        OPENFAILEDINFO.setBounds(80, 60, 1050, 150);

        OPENFAILDEBACK.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        OPENFAILDEBACK.setText("BACK !");
        OPENFAILDEBACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENFAILDEBACKActionPerformed(evt);
            }
        });
        OPENFAILED.add(OPENFAILDEBACK);
        OPENFAILDEBACK.setBounds(410, 360, 360, 110);

        getContentPane().add(OPENFAILED, "card7");

        GAME.setMinimumSize(new java.awt.Dimension(1200, 700));
        GAME.setPreferredSize(new java.awt.Dimension(1200, 699));
        GAME.setLayout(null);

        statsPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        statsPanel1.setLayout(new java.awt.FlowLayout());
        GAME.add(statsPanel1);
        statsPanel1.setBounds(670, 60, 520, 140);

        boardPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        boardPanel1.setMaximumSize(new java.awt.Dimension(640, 640));
        boardPanel1.setMinimumSize(new java.awt.Dimension(640, 640));
        boardPanel1.setLayout(new java.awt.FlowLayout());
        GAME.add(boardPanel1);
        boardPanel1.setBounds(10, 10, 640, 640);

        myCardPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        GAME.add(myCardPanel1);
        myCardPanel1.setBounds(970, 270, 180, 240);

        freePanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        freePanel1.setLayout(new java.awt.FlowLayout());
        GAME.add(freePanel1);
        freePanel1.setBounds(710, 270, 200, 200);

        MAINMENU.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        MAINMENU.setText("MENU");
        MAINMENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MAINMENUActionPerformed(evt);
            }
        });
        GAME.add(MAINMENU);
        MAINMENU.setBounds(1000, 600, 180, 60);

        ACCEPT.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        ACCEPT.setText("ACCEPT !");
        ACCEPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACCEPTActionPerformed(evt);
            }
        });
        GAME.add(ACCEPT);
        ACCEPT.setBounds(680, 590, 300, 80);

        UNDOBUTTON.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        UNDOBUTTON.setText("UNDO !");
        UNDOBUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UNDOBUTTONActionPerformed(evt);
            }
        });
        GAME.add(UNDOBUTTON);
        UNDOBUTTON.setBounds(690, 490, 240, 80);

        GAMECARD.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        GAMECARD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GAMECARD.setText("MY CARD");
        GAME.add(GAMECARD);
        GAMECARD.setBounds(940, 210, 230, 50);

        GAMEFREE.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        GAMEFREE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GAMEFREE.setText("FREE ROCK");
        GAME.add(GAMEFREE);
        GAMEFREE.setBounds(680, 220, 250, 40);

        GAMESTATS.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        GAMESTATS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GAMESTATS.setText("STATS");
        GAME.add(GAMESTATS);
        GAMESTATS.setBounds(680, 10, 500, 40);

        GODMODE.setBorderPainted(false);
        GODMODE.setContentAreaFilled(false);
        GODMODE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GODMODEActionPerformed(evt);
            }
        });
        GAME.add(GODMODE);
        GODMODE.setBounds(1170, 10, 20, 20);

        getContentPane().add(GAME, "card5");

        HELP.setText("Help");

        MENUHTP.setText("How to play");
        MENUHTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MENUHTPActionPerformed(evt);
            }
        });
        HELP.add(MENUHTP);

        MENUABOUT.setText("About");
        MENUABOUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MENUABOUTActionPerformed(evt);
            }
        });
        HELP.add(MENUABOUT);

        MENUEXIT.setText("Exit");
        MENUEXIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MENUEXITActionPerformed(evt);
            }
        });
        HELP.add(MENUEXIT);

        jMenuBar1.add(HELP);

        LANGINFO.setText("EN");

        OPENLANG.setText("Set language");
        OPENLANG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENLANGActionPerformed(evt);
            }
        });
        LANGINFO.add(OPENLANG);

        jMenuBar1.add(LANGINFO);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Chceme ist do hlavneho menu z hry ked sa uz hra
     *
     * @param evt
     */
    private void MAINMENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MAINMENUActionPerformed

        GAME.setVisible(false);
        MENU.setVisible(true);
    }//GEN-LAST:event_MAINMENUActionPerformed

    /**
     * Load game from file
     */
    private void OPENSTARTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPENSTARTActionPerformed

        //System.out.println("I Loaded hraciePole>SIZE:" + ", PLAYERS:" + ", CARDS:");
        // Nacita sa nova hra
        int ERRCODE = GameIO.LoadGame(GameName);

        // overi sa ci bolo nacitanie spravne
        if (ERRCODE == 1) {
            // OPENING ERROR
            OPEN.setVisible(false);
            OPENFAILED.setVisible(true);
        } else if (ERRCODE == 0) {
            // OK spustim hru
            OPEN.setVisible(false);
            GAME.setVisible(true);
            SAVEGAME.setEnabled(true);
            RESUMEGAME.setEnabled(true);
            drawAll();
        }

    }//GEN-LAST:event_OPENSTARTActionPerformed

    /**
     * Prechod z OPEN menu do MENU (kliknute na BACK)
     *
     * @param evt
     */
    private void OPENBACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPENBACKActionPerformed
        // TODO add your handling code here:
        OPEN.setVisible(false);
        MENU.setVisible(true);
    }//GEN-LAST:event_OPENBACKActionPerformed

    /**
     * Ideme z MENU do NOVEJ HRY - do nastaveni novej hry
     *
     * @param evt
     */
    private void NEWGAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEWGAMEActionPerformed
        // TODO add your handling code here:
        PLAYERNR.setText("PLAYER 1"); // set text player 1 to NAMES
        PLAYERNAMESCR.setVisible(true);
        MENU.setVisible(false);
        NEW1.setVisible(true);
    }//GEN-LAST:event_NEWGAMEActionPerformed

    /**
     * Ideme z MENU do OPEN GAME - treba nacitat do combo boxu vsetky ulozene
     * hry v priecinku savedGames
     *
     * @param evt
     */
    private void OPENGAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPENGAMEActionPerformed

        //Nacitaj hry zo suboru
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>((String[]) GameIO.getSavedGames()));
        jComboBox1.setSelectedIndex(0);

        MENU.setVisible(false);
        OPEN.setVisible(true);
    }//GEN-LAST:event_OPENGAMEActionPerformed

    /**
     * Prechadzame z nastaveni novej hry do MENU (stlacene BACK)
     *
     * @param evt
     */
    private void NEW1_BACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEW1_BACKActionPerformed

        NEW1.setVisible(false);
        MENU.setVisible(true);

    }//GEN-LAST:event_NEW1_BACKActionPerformed

    /**
     * Prechadzame z NASTAVENI NOVEJ HRY (pocet hracov) do vyberu velkosti
     * hracieho pola
     *
     * @param evt
     */
    private void NEW1_NEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEW1_NEXTActionPerformed

        NEW1.setVisible(false);
        NEW2.setVisible(true);
    }//GEN-LAST:event_NEW1_NEXTActionPerformed

    /**
     * Prechadzame z vyberu velkosti hracieho pola do vyberu poctu hracov (BACK)
     *
     * @param evt
     */
    private void NEW2_BACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEW2_BACKActionPerformed

        NEW1.setVisible(true);
        NEW2.setVisible(false);
    }//GEN-LAST:event_NEW2_BACKActionPerformed

    /**
     * Vytvorime novu hru, potom pojdeme do INSERTPLAYER vyplnit mena hracov
     *
     * @param evt
     */
    private void NEW2_NEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEW2_NEXTActionPerformed

        int SZE = SIZE.getValue();
        int CRD = (CARDGRP.getSelection().getMnemonic()) - 53;
        int PLY = (PLGRP.getSelection().getMnemonic()) - 48;

        //System.out.println("I created hraciePole>SIZE:" + SZE + ", PLAYERS:" + PLY + ", CARDS:" + CRD);
        int ERRCODE = LOG.NewGame(SZE, CRD, PLY);

        // INSERT PLAYER NAMES
        NEW2.setVisible(false);
        INSERTPLAYER.setVisible(true);
        PLAYERNR.setText(gameTXT[68] + " 1");
        OKINSERT.setText(gameTXT[35]);

    }//GEN-LAST:event_NEW2_NEXTActionPerformed

    /**
     * Meni posuvnik velkosti hracieho pola
     *
     * @param evt
     */
    private void SIZEStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SIZEStateChanged
        // TODO add your handling code here:
        SIZEVAL.setText("" + SIZE.getValue());
    }//GEN-LAST:event_SIZEStateChanged

    /**
     * Event pre tlacidlo ACCEPT, button c 1
     *
     * @param evt
     */
    private void ACCEPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACCEPTActionPerformed
        LOG.GameProcess(1, 0, 0);
        //LOG.nextTurn();
        drawAll();
    }//GEN-LAST:event_ACCEPTActionPerformed

    /**
     * Vyberte si hru z ulozenych hier
     *
     * @param evt
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO zvolime hru ktoru chceme nacitat
        //String value = comboBox.getSelectedItem().toString();
        JComboBox cb = (JComboBox) evt.getSource();
        if (cb.getSelectedIndex() != 0) {
            OPENSTART.setEnabled(true);
        } else {
            OPENSTART.setEnabled(false);
        }
        GameName = (String) cb.getSelectedItem();

    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * Stlacene tlacitko RESUME - ideme z MENU DO HRY naspet
     *
     * @param evt
     */
    private void RESUMEGAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RESUMEGAMEActionPerformed
        // TODO add your handling code here:
        GAME.setVisible(true);
        MENU.setVisible(false);
    }//GEN-LAST:event_RESUMEGAMEActionPerformed

    /**
     * Otvori dialog SAVEGAME
     *
     * @param evt
     */
    private void SAVEGAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEGAMEActionPerformed

        SAVE1.setVisible(true);
        SAVEDONE.setVisible(false);
        SAVEFAIL.setVisible(false);
        SAVEEXIST.setVisible(false);
        SAVEDIALOG.setVisible(true);
    }//GEN-LAST:event_SAVEGAMEActionPerformed

    /**
     * CI CHCEM PREPISAT HRU
     *
     * @param evt
     */
    private void SAVEOVERWRITEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEOVERWRITEActionPerformed
        // TODO add your handling code here:
        //DALSI krat sa vola save -- OVERWRITE!!!
        int SAVECODE = GameIO.save(nameOfGame.getText(), true);
        if (SAVECODE == 10) {
            //PERMISSIONS DENIED
            SAVE1.setVisible(false);
            SAVEFAIL.setVisible(true);
        } else if (SAVECODE == 0) {
            // ---> OK GAME SAVED CLICK ON  OK!
            SAVEEXIST.setVisible(false);
            SAVEDONE.setVisible(true);
        }
    }//GEN-LAST:event_SAVEOVERWRITEActionPerformed

    /**
     * OK SAVE - 1krat volame - ak uz je taka hra ideme do OVERWRITE, zle do
     * FAIL
     *
     * @param evt
     */
    private void SAVE1_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVE1_OKActionPerformed

        //1. krat sa vola save
        int SAVECODE = GameIO.save(nameOfGame.getText(), false);
        if (SAVECODE == 5) {
            // GAME EXISTS..OVERWRITE?
            SAVE1.setVisible(false);
            SAVEEXIST.setVisible(true);

        } else if (SAVECODE == 10) {
            //PERMISSIONS DENIED
            SAVE1.setVisible(false);
            SAVEFAIL.setVisible(true);
        } else if (SAVECODE == 0) {
            // ---> OK GAME SAVED CLICK ON  OK!
            SAVE1.setVisible(false);
            SAVEDONE.setVisible(true);
        }

    }//GEN-LAST:event_SAVE1_OKActionPerformed

    /**
     * Ideme z ukladania hry do MENU
     *
     * @param evt
     */
    private void SAVEDONEOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEDONEOKActionPerformed

        SAVEDONE.setVisible(false);
        SAVEDIALOG.setVisible(false);
        MENU.setVisible(true);
    }//GEN-LAST:event_SAVEDONEOKActionPerformed

    /**
     * Ideme z SAVE do MENU
     *
     * @param evt
     */
    private void SAVEFAILOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEFAILOKActionPerformed

        SAVEFAIL.setVisible(false);
        SAVEDIALOG.setVisible(false);
        MENU.setVisible(true);
    }//GEN-LAST:event_SAVEFAILOKActionPerformed

    /**
     * Hra existovala ideme naspet , zmenime meno hry (BACK)
     *
     * @param evt
     */
    private void SAVEEXISTBACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEEXISTBACKActionPerformed

        SAVEEXIST.setVisible(false);
        SAVE1.setVisible(true);
    }//GEN-LAST:event_SAVEEXISTBACKActionPerformed

    /**
     * Ideme z OPENFAILED do OPEN
     *
     * @param evt
     */
    private void OPENFAILDEBACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPENFAILDEBACKActionPerformed

        OPENFAILED.setVisible(false);
        OPEN.setVisible(true);
    }//GEN-LAST:event_OPENFAILDEBACKActionPerformed

    /**
     * UNDO BUTTON akcia, odosiela signal LOGIKE (signal 2)
     *
     * @param evt
     */
    private void UNDOBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UNDOBUTTONActionPerformed

        LOG.GameProcess(2, 0, 0);
        drawAll();
    }//GEN-LAST:event_UNDOBUTTONActionPerformed

    /**
     * Z hry ideme do MENU
     *
     * @param evt
     */
    private void WINTOMEMUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WINTOMEMUActionPerformed

        WINDIALOG.setVisible(false);
        GAME.setVisible(false);
        MENU.setVisible(true);
    }//GEN-LAST:event_WINTOMEMUActionPerformed

    static int godmode = 0;//godmode counter

    /**
     * BUTTON pre cheat - GODMODE
     *
     * @param evt
     */
    private void GODMODEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GODMODEActionPerformed

        godmode++;
        if (godmode == 10) {
            System.out.println("GOOOOOOD-MODE");
            LOG.cheats(1);
        }

    }//GEN-LAST:event_GODMODEActionPerformed

    /**
     * Vlozime jedneho hraca + obmedzenie dlzky mena na 10znakov/rozsirenie na
     * 10
     *
     * @param evt
     */
    private void OKINSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKINSERTActionPerformed

        //insert player
        int PLY = (PLGRP.getSelection().getMnemonic()) - 48;
        int JUST = LOG.getPlayers().getCount();

        if (PLY <= JUST) {
            //OK PLAYERS INSERTED...
            drawAll();

            INSERTPLAYER.setVisible(false);
            SAVEGAME.setEnabled(true);
            RESUMEGAME.setEnabled(true);
            GAME.setVisible(true);
        } else {
            // INSERT PLAYER !
            String PLYNM = PLAYERNAME.getText();
            PLYNM = PLYNM.replace("\n", "");// REMOVE NEWLINES

            if (PLYNM.equals("")) {
                PLYNM = "PLAYER " + (LOG.getPlayers().getCount() + 1);
            }

            //obmedzenie dlzky
            if (PLYNM.length() >= 10) {
                PLYNM = PLYNM.substring(0, 10);
            }
            PLYNM = String.format("%1$" + (10) + "s", PLYNM);

            PLAYERNAME.setText("");
            LOG.insertPlayer(PLYNM);
            JUST = LOG.getPlayers().getCount();

        }
        if (PLY == JUST) {
            OKINSERT.setText(gameTXT[69]);
            PLAYERNR.setText(gameTXT[70]);
            PLAYERNAMESCR.setVisible(false);
        } else {
            PLAYERNR.setText(gameTXT[68] + " " + (JUST + 1));
        }

    }//GEN-LAST:event_OKINSERTActionPerformed

    /**
     * MENUBAR - How to play
     *
     * @param evt
     */
    private void MENUHTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MENUHTPActionPerformed
        // TODO add your handling code here:
        EXIT.setVisible(false);
        NOTEXIT.setVisible(false);

        ABOUTINFO.setText(gameTXT[47]);
        ABOUTTEXT.setText(gameTXT[12]);
        ABOUT.setVisible(true);
    }//GEN-LAST:event_MENUHTPActionPerformed

    /**
     * MENUBAR - About
     *
     * @param evt
     */
    private void MENUABOUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MENUABOUTActionPerformed
        // TODO add your handling code here:
        EXIT.setVisible(false);
        NOTEXIT.setVisible(false);

        ABOUTINFO.setText(gameTXT[48]);
        ABOUTTEXT.setText(gameTXT[11]);

        ABOUT.setVisible(true);
    }//GEN-LAST:event_MENUABOUTActionPerformed

    /**
     * MENUBAR - EXIT + si si isty ze chces ukoncit hru??
     *
     * @param evt
     */
    private void MENUEXITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MENUEXITActionPerformed
        // TODO add your handling code here:
        EXIT.setVisible(true);
        NOTEXIT.setVisible(true);
        ABOUTINFO.setText("EXIT");

        ABOUTTEXT.setText(gameTXT[10]);

        ABOUT.setVisible(true);
    }//GEN-LAST:event_MENUEXITActionPerformed

    /**
     * EXIT GAME - SYS exit 0
     *
     * @param evt
     */
    private void EXITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXITActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_EXITActionPerformed

    /**
     * Nechcem ukoncit hru, idem naspet do hlavneho okno
     *
     * @param evt
     */
    private void NOTEXITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NOTEXITActionPerformed
        // TODO add your handling code here:
        ABOUTINFO.setText("EXIT");
        ABOUT.setVisible(false);

    }//GEN-LAST:event_NOTEXITActionPerformed

    /**
     * Chcem zmenit jazyk - ukaz ake mam na vyber
     *
     * @param evt
     */
    private void OPENLANGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPENLANGActionPerformed
        // TODO add your handling code here:

        LANGCHOOSE.setModel(new javax.swing.DefaultComboBoxModel<>((String[]) GameIO.getLangs()));
        LANGCHOOSE.setSelectedIndex(0);
        LANGDIALOG.setVisible(true);
    }//GEN-LAST:event_OPENLANGActionPerformed

    /**
     * Chcem zmenit jazyk, vybral som si tento!
     *
     * @param evt
     */
    private void LANGSETActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LANGSETActionPerformed
        // TODO add your handling code here:
        generateLang(GameIO.loadLang(LANGCHOOSE.getSelectedItem().toString()));
        LANGDIALOG.setVisible(false);

    }//GEN-LAST:event_LANGSETActionPerformed

    private void LANGCHOOSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LANGCHOOSEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LANGCHOOSEActionPerformed

    /**
     * Prekresli cely panel GAME (doska,staty,karta,volny kamen,..) Ak niekto
     * vyhral vyskoci POPUP dialog o vyhre
     */
    public void drawAll() {
        if (LOG.getGameState() == 0) {
            // DRAW ENDGAME POPUP
            WINNAME.setText(LOG.getPlayers().getPlayerOnTurn().getName());
            WINDIALOG.setVisible(true);
        }

        statsPanel1.draw();
        freePanel1.draw();
        boardPanel1.draw();
        myCardPanel1.draw();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    /**
     * Meni jazyk hry
     *
     * @param LANG jazyk, kt. chceme pouzit
     */
    public void generateLang(String LANG[]) {
        // Original EN language
        if (LANG[99].equals("EN-ORIGINAL")) {
            gameTXT = origLANG;
        } else {
            gameTXT = LANG;
            gameTXT[11] = origLANG[11];//about ostava
        }
        repaint();
        setLangGui();
    }

    public void setLangGui() {
        LANGINFO.setText(gameTXT[99]);
        //MAIN MENU 4x
        NEWGAME.setText(gameTXT[20]);
        OPENGAME.setText(gameTXT[21]);
        SAVEGAME.setText(gameTXT[22]);
        RESUMEGAME.setText(gameTXT[23]);

        //NEW1 6x
        NEW1_INFO.setText(gameTXT[24]);
        NEW1_BACK.setText(gameTXT[25]);
        NEW1_NEXT.setText(gameTXT[26]);
        PL2.setText(gameTXT[27]);
        PL3.setText(gameTXT[28]);
        PL4.setText(gameTXT[29]);

        //NEW2 4x
        NEW2_INFO.setText(gameTXT[30]);
        NEW2_BACK.setText(gameTXT[31]);
        NEW2_NEXT.setText(gameTXT[32]);
        NEW2_CARDS.setText(gameTXT[33]);

        //INSERT 2x
        INSERTPLAYERINFO.setText(gameTXT[34]);//SET PLAYER NAMES
        OKINSERT.setText(gameTXT[35]);//SET NAME!

        //OPEN 4x
        OPENBACK.setText(gameTXT[36]);
        OPENSTART.setText(gameTXT[37]);//Resume selected game
        OPENFAILEDINFO.setText(gameTXT[38]);
        OPENFAILDEBACK.setText(gameTXT[39]);

        //GAME 6x
        GAMESTATS.setText(gameTXT[40]);
        GAMEFREE.setText(gameTXT[41]);
        GAMECARD.setText(gameTXT[42]);
        UNDOBUTTON.setText(gameTXT[43]);
        ACCEPT.setText(gameTXT[44]);
        MAINMENU.setText(gameTXT[45]);

        //MENUBAR 5x
        HELP.setText(gameTXT[46]);
        MENUHTP.setText(gameTXT[47]);
        MENUABOUT.setText(gameTXT[48]);
        MENUEXIT.setText(gameTXT[49]);
        OPENLANG.setText(gameTXT[50]);//31

        //ABOUTDIALOG 3x
        ABOUTINFO.setText(gameTXT[51]);
        EXIT.setText(gameTXT[52]);
        NOTEXIT.setText(gameTXT[53]);

        //LANGDIALOG 2x
        LANGDIALINFO.setText(gameTXT[54]);// SET LANG
        LANGSET.setText(gameTXT[55]); // OK!

        //WINDIALOG 3x
        WININFO.setText(gameTXT[56]);
        WINIS.setText(gameTXT[57]);
        WINTOMEMU.setText(gameTXT[58]);

        //SAVEDIALOG 9x
        SAVEDONEINFO.setText(gameTXT[59]);
        SAVEDONEOK.setText(gameTXT[60]);
        SAVE1_INFO.setText(gameTXT[61]);
        SAVE1_OK.setText(gameTXT[62]);
        SAVEFAILINFO.setText(gameTXT[63]);
        SAVEFAILOK.setText(gameTXT[64]);//backtomenu
        SAVEEXISTINFO.setText(gameTXT[65]);
        SAVEEXISTBACK.setText(gameTXT[66]);
        SAVEOVERWRITE.setText(gameTXT[67]);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog ABOUT;
    private javax.swing.JLabel ABOUTINFO;
    private javax.swing.JLabel ABOUTTEXT;
    private javax.swing.JButton ACCEPT;
    private javax.swing.JRadioButton CARD12;
    private javax.swing.JRadioButton CARD24;
    private javax.swing.ButtonGroup CARDGRP;
    private javax.swing.JButton EXIT;
    private javax.swing.JPanel GAME;
    private javax.swing.JLabel GAMECARD;
    private javax.swing.JLabel GAMEFREE;
    private javax.swing.JLabel GAMESTATS;
    private javax.swing.JButton GODMODE;
    private javax.swing.JMenu HELP;
    private javax.swing.JPanel INSERTPLAYER;
    private javax.swing.JLabel INSERTPLAYERINFO;
    private javax.swing.JComboBox<String> LANGCHOOSE;
    private javax.swing.JLabel LANGDIALINFO;
    private javax.swing.JDialog LANGDIALOG;
    private javax.swing.JMenu LANGINFO;
    private javax.swing.JButton LANGSET;
    private javax.swing.JButton MAINMENU;
    private javax.swing.JPanel MENU;
    private javax.swing.JMenuItem MENUABOUT;
    private javax.swing.JMenuItem MENUEXIT;
    private javax.swing.JMenuItem MENUHTP;
    private javax.swing.JPanel NEW1;
    private javax.swing.JButton NEW1_BACK;
    private javax.swing.JLabel NEW1_INFO;
    private javax.swing.JButton NEW1_NEXT;
    private javax.swing.JPanel NEW2;
    private javax.swing.JButton NEW2_BACK;
    private javax.swing.JLabel NEW2_CARDS;
    private javax.swing.JLabel NEW2_INFO;
    private javax.swing.JButton NEW2_NEXT;
    private javax.swing.JButton NEWGAME;
    private javax.swing.JButton NOTEXIT;
    private javax.swing.JButton OKINSERT;
    private javax.swing.JPanel OPEN;
    private javax.swing.JButton OPENBACK;
    private javax.swing.JButton OPENFAILDEBACK;
    private javax.swing.JPanel OPENFAILED;
    private javax.swing.JLabel OPENFAILEDINFO;
    private javax.swing.JButton OPENGAME;
    private javax.swing.JMenuItem OPENLANG;
    private javax.swing.JButton OPENSTART;
    private javax.swing.JRadioButton PL2;
    private javax.swing.JRadioButton PL3;
    private javax.swing.JRadioButton PL4;
    private javax.swing.JTextArea PLAYERNAME;
    private javax.swing.JScrollPane PLAYERNAMESCR;
    private javax.swing.JLabel PLAYERNR;
    private javax.swing.ButtonGroup PLGRP;
    private javax.swing.JButton RESUMEGAME;
    private javax.swing.JPanel SAVE1;
    private javax.swing.JLabel SAVE1_INFO;
    private javax.swing.JButton SAVE1_OK;
    private javax.swing.JDialog SAVEDIALOG;
    private javax.swing.JPanel SAVEDONE;
    private javax.swing.JLabel SAVEDONEINFO;
    private javax.swing.JButton SAVEDONEOK;
    private javax.swing.JPanel SAVEEXIST;
    private javax.swing.JButton SAVEEXISTBACK;
    private javax.swing.JLabel SAVEEXISTINFO;
    private javax.swing.JPanel SAVEFAIL;
    private javax.swing.JLabel SAVEFAILINFO;
    private javax.swing.JButton SAVEFAILOK;
    private javax.swing.JButton SAVEGAME;
    private javax.swing.JButton SAVEOVERWRITE;
    private javax.swing.JSlider SIZE;
    private javax.swing.JLabel SIZEVAL;
    private javax.swing.JButton UNDOBUTTON;
    private javax.swing.JDialog WINDIALOG;
    private javax.swing.JLabel WININFO;
    private javax.swing.JLabel WINIS;
    private javax.swing.JLabel WINNAME;
    private javax.swing.JButton WINTOMEMU;
    private ija.Panels.BoardPanel boardPanel1;
    private ija.Panels.FreePanel freePanel1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JMenuBar jMenuBar1;
    private ija.Panels.MyCardPanel myCardPanel1;
    private javax.swing.JTextArea nameOfGame;
    private ija.Panels.StatsPanel statsPanel1;
    // End of variables declaration//GEN-END:variables
}
